# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import route_guide_pb2 as route__guide__pb2


class RouteGuideStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddCountry = channel.stream_unary(
                '/RouteGuide/AddCountry',
                request_serializer=route__guide__pb2.Country.SerializeToString,
                response_deserializer=route__guide__pb2.Result.FromString,
                )
        self.AddGenre = channel.stream_unary(
                '/RouteGuide/AddGenre',
                request_serializer=route__guide__pb2.Genre.SerializeToString,
                response_deserializer=route__guide__pb2.Result.FromString,
                )
        self.AddHall = channel.stream_unary(
                '/RouteGuide/AddHall',
                request_serializer=route__guide__pb2.Hall.SerializeToString,
                response_deserializer=route__guide__pb2.Result.FromString,
                )
        self.AddFilm = channel.stream_unary(
                '/RouteGuide/AddFilm',
                request_serializer=route__guide__pb2.Film.SerializeToString,
                response_deserializer=route__guide__pb2.Result.FromString,
                )
        self.AddSession = channel.stream_unary(
                '/RouteGuide/AddSession',
                request_serializer=route__guide__pb2.Session.SerializeToString,
                response_deserializer=route__guide__pb2.Result.FromString,
                )


class RouteGuideServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddCountry(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddGenre(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddHall(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddFilm(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddSession(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RouteGuideServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddCountry': grpc.stream_unary_rpc_method_handler(
                    servicer.AddCountry,
                    request_deserializer=route__guide__pb2.Country.FromString,
                    response_serializer=route__guide__pb2.Result.SerializeToString,
            ),
            'AddGenre': grpc.stream_unary_rpc_method_handler(
                    servicer.AddGenre,
                    request_deserializer=route__guide__pb2.Genre.FromString,
                    response_serializer=route__guide__pb2.Result.SerializeToString,
            ),
            'AddHall': grpc.stream_unary_rpc_method_handler(
                    servicer.AddHall,
                    request_deserializer=route__guide__pb2.Hall.FromString,
                    response_serializer=route__guide__pb2.Result.SerializeToString,
            ),
            'AddFilm': grpc.stream_unary_rpc_method_handler(
                    servicer.AddFilm,
                    request_deserializer=route__guide__pb2.Film.FromString,
                    response_serializer=route__guide__pb2.Result.SerializeToString,
            ),
            'AddSession': grpc.stream_unary_rpc_method_handler(
                    servicer.AddSession,
                    request_deserializer=route__guide__pb2.Session.FromString,
                    response_serializer=route__guide__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RouteGuide', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RouteGuide(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddCountry(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/RouteGuide/AddCountry',
            route__guide__pb2.Country.SerializeToString,
            route__guide__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddGenre(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/RouteGuide/AddGenre',
            route__guide__pb2.Genre.SerializeToString,
            route__guide__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddHall(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/RouteGuide/AddHall',
            route__guide__pb2.Hall.SerializeToString,
            route__guide__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddFilm(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/RouteGuide/AddFilm',
            route__guide__pb2.Film.SerializeToString,
            route__guide__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddSession(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/RouteGuide/AddSession',
            route__guide__pb2.Session.SerializeToString,
            route__guide__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
